main.tf

resource "aws_apigatewayv2_api" "apigateway" {
  name                         = var.name
  protocol_type                = var.protocol_type
  api_key_selection_expression = var.api_key_selection_expression
  credentials_arn              = var.credentials_arn
  description                  = var.description
  disable_execute_api_endpoint = var.disable_execute_api_endpoint
  route_key                    = var.route_key
  route_selection_expression   = var.route_selection_expression
  tags                         = var.tags
  target                       = var.target
  body                         = var.body
  version                      = var.version1
  fail_on_warnings             = var.fail_on_warnings
  dynamic "cors_configuration" {
    for_each = var.cors_configuration != null ? var.cors_configuration : {}
    content {
      allow_credentials = cors_configuration.value.allow_credentials
      allow_headers     = cors_configuration.value.allow_headers
      allow_methods     = cors_configuration.value.allow_methods
      allow_origins     = cors_configuration.value.allow_origins
      expose_headers    = cors_configuration.value.expose_headers
      max_age           = cors_configuration.value.max_age
    }
  }
}

resource "aws_apigatewayv2_route" "api_routes" {
  for_each                            = var.api_routes != null ? var.api_routes : {}
  api_id                              = aws_apigatewayv2_api.apigateway.id
  route_key                           = lookup(each.value, "route_key")
  api_key_required                    = lookup(each.value, "api_key_required")
  authorization_scopes                = lookup(each.value, "authorization_scopes")
  authorization_type                  = lookup(each.value, "authorization_type")
  authorizer_id                       = lookup(each.value, "authorizer_id")
  model_selection_expression          = lookup(each.value, "model_selection_expression")
  operation_name                      = lookup(each.value, "operation_name")
  request_models                      = lookup(each.value, "request_models")
  route_response_selection_expression = lookup(each.value, "route_response_selection_expression")
  target                              = "integrations/${aws_apigatewayv2_integration.api_integration[each.key].id}"

  dynamic "request_parameter" {
    for_each = var.request_parameter != null ? [var.request_parameter] : []
    content {
      request_parameter_key = request_parameter.value.request_parameter_key
      required              = request_parameter.value.required
    }
  }
}

resource "aws_apigatewayv2_integration" "api_integration" {
  for_each                      = var.api_integration != null ? var.api_integration : {}
  api_id                        = aws_apigatewayv2_api.apigateway.id
  integration_type              = lookup(each.value, "integration_type")
  connection_id                 = lookup(each.value, "connection_id")
  connection_type               = lookup(each.value, "connection_type")
  content_handling_strategy     = lookup(each.value, "content_handling_strategy")
  credentials_arn               = lookup(each.value, "credentials_arn")
  description                   = lookup(each.value, "description")
  integration_method            = lookup(each.value, "integration_method")
  integration_subtype           = lookup(each.value, "integration_subtype")
  integration_uri               = lookup(each.value, "integration_uri")
  passthrough_behavior          = lookup(each.value, "passthrough_behavior")
  payload_format_version        = lookup(each.value, "payload_format_version")
  request_parameters            = lookup(each.value, "request_parameters")
  request_templates             = lookup(each.value, "request_templates")
  template_selection_expression = lookup(each.value, "template_selection_expression")
  timeout_milliseconds          = lookup(each.value, "timeout_milliseconds")


  dynamic "response_parameters" {
    for_each = var.response_parameters != null ? [var.response_parameters] : []
    content {
      status_code = response_parameters.value.status_code
      mappings    = response_parameters.value.mappings
    }
  }

  dynamic "tls_config" {
    for_each = var.tls_config != null ? [var.tls_config] : []
    content {
      server_name_to_verify = tls_config.value.server_name_to_verify

    }
  }
}

resource "aws_apigatewayv2_authorizer" "api_authorizer" {
  for_each                          = var.api_authorizer != null ? var.api_authorizer : {}
  api_id                            = aws_apigatewayv2_api.apigateway.id
  authorizer_type                   = lookup(each.value, "authorizer_type")
  name                              = lookup(each.value, "name")
  authorizer_credentials_arn        = lookup(each.value, "authorizer_credentials_arn")
  authorizer_payload_format_version = lookup(each.value, "authorizer_payload_format_version")
  authorizer_result_ttl_in_seconds  = lookup(each.value, "authorizer_result_ttl_in_seconds")
  authorizer_uri                    = lookup(each.value, "authorizer_uri")
  enable_simple_responses           = lookup(each.value, "enable_simple_responses")
  identity_sources                  = lookup(each.value, "identity_sources")

  dynamic "jwt_configuration" {
    for_each = var.jwt_configuration != null ? [var.jwt_configuration] : []
    content {
      audience = jwt_configuration.value.audience
      issuer   = jwt_configuration.value.issuer
    }
  }
}
resource "aws_apigatewayv2_stage" "api_stage" {
  for_each = var.api_stage != null ? var.api_stage : {}

  api_id                = aws_apigatewayv2_api.apigateway.id
  name                  = lookup(each.value, "name")
  auto_deploy           = lookup(each.value, "auto_deploy")
  client_certificate_id = lookup(each.value, "client_certificate_id")
  deployment_id         = lookup(each.value, "deployment_id")
  description           = lookup(each.value, "description")
  stage_variables       = lookup(each.value, "stage_variables")
  tags                  = lookup(each.value, "tags")


  dynamic "access_log_settings" {
    for_each = var.access_log_settings != null ? [var.access_log_settings] : []
    content {
      destination_arn = access_log_settings.value.destination_arn
      format          = access_log_settings.value.format
    }
  }

  dynamic "default_route_settings" {
    for_each = var.default_route_settings != null ? [var.default_route_settings] : []
    content {
      data_trace_enabled       = default_route_settings.value.data_trace_enabled
      detailed_metrics_enabled = default_route_settings.value.detailed_metrics_enabled
      logging_level            = default_route_settings.value.logging_level
      throttling_burst_limit   = default_route_settings.value.throttling_burst_limit
      throttling_rate_limit    = default_route_settings.value.throttling_rate_limit
    }
  }

  dynamic "route_settings" {
    for_each = var.route_settings != null ? [var.route_settings] : []
    content {
      route_key                = aws_apigatewayv2_api.apigateway.route_key
      data_trace_enabled       = route_settings.value.data_trace_enabled
      detailed_metrics_enabled = route_settings.value.detailed_metrics_enabled
      logging_level            = route_settings.value.logging_level
      throttling_burst_limit   = route_settings.value.throttling_burst_limit
      throttling_rate_limit    = route_settings.value.throttling_rate_limit

    }
  }
}

resource "aws_lambda_permission" "api_lambda_permissions" {
  for_each = var.api_lambda_permissions != null ? var.api_lambda_permissions : {}

  statement_id  = lookup(each.value, "statement_id")
  action        = lookup(each.value, "action")
  function_name = lookup(each.value, "function_name")
  principal     = lookup(each.value, "principal")
  source_arn    = "${aws_apigatewayv2_api.apigateway.execution_arn}/*/*"
}


variables.tf

variable "name" {
  type        = string
  description = " Name of the API. Must be less than or equal to 128 characters in length"
}

variable "protocol_type" {
  type        = string
  description = "API protocol. Valid values: HTTP, WEBSOCKET"
}

variable "api_key_selection_expression" {
  type        = string
  description = "An API key selection expression. Valid values: $context.authorizer.usageIdentifierKey, $request.header.x-api-key. Defaults to $request.header.x-api-key. Applicable for WebSocket APIs."
  default     = null
}

variable "credentials_arn" {
  type        = string
  description = "Part of quick create. Specifies any credentials required for the integration. Applicable for HTTP APIs."
  default     = null
}


variable "description" {
  type        = string
  description = "Description of the API. Must be less than or equal to 1024 characters in length"
  default     = null
}

variable "disable_execute_api_endpoint" {
  type        = bool
  description = "Whether clients can invoke the API by using the default execute-api endpoint. By default, clients can invoke the API with the default {api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint"
  default     = false
}

variable "route_key" {
  type        = string
  description = "Part of quick create. Specifies any route key. Applicable for HTTP APIs"
  default     = null
}

variable "route_selection_expression" {
  type        = string
  description = " The route selection expression for the API. Defaults to $request.method $request.path."
  default     = null
}

variable "tags" {
  type        = map(string)
  description = "Map of tags to assign to the API. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level."
  default     = null
}


variable "target" {
  type        = string
  description = "Part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Applicable for HTTP APIs"
  default     = null
}

variable "body" {
  type        = string
  description = "An OpenAPI specification that defines the set of routes and integrations to create as part of the HTTP APIs. Supported only for HTTP APIs."
  default     = null
}


variable "version1" {
  type        = string
  description = "Version identifier for the API. Must be between 1 and 64 characters in length"
  default     = null
}

variable "fail_on_warnings" {
  type        = string
  description = "Whether warnings should return an error while API Gateway is creating or updating the resource using an OpenAPI specification. Defaults to false. Applicable for HTTP APIs."
  default     = null
}

variable "cors_configuration" {
  description = "The cross-origin resource sharing (CORS) configuration. Applicable for HTTP APIs."
  type = map(object({
    allow_credentials = optional(string, null) # Whether credentials are included in the CORS request.
    allow_headers     = optional(string, null) # Set of allowed HTTP headers.
    allow_methods     = optional(string, null) # Set of allowed HTTP methods.
    allow_origins     = optional(string, null) # Set of allowed origins.
    expose_headers    = optional(string, null) # Set of exposed HTTP headers.
    max_age           = optional(string, null) # Number of seconds that the browser should cache preflight request results.
  }))
  default = {}
}

variable "api_routes" {
  type = map(object({

    route_key                           = string                     # Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets
    api_key_required                    = optional(bool, false)      # Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
    authorization_scopes                = optional(list(string), []) #  Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
    authorization_type                  = optional(string, null)     # Authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. Defaults to NONE
    authorizer_id                       = optional(string, null)     # Identifier of the aws_apigatewayv2_authorizer resource to be associated with this route.
    model_selection_expression          = optional(string, null)     # The model selection expression for the route. Supported only for WebSocket APIs.
    operation_name                      = optional(string, null)     # Operation name for the route. Must be between 1 and 64 characters in length.
    request_models                      = optional(map(string), {})  # Request models for the route. Supported only for WebSocket APIs.
    route_response_selection_expression = optional(string, null)     # The route response selection expression for the route. Supported only for WebSocket APIs.
    target                              = optional(string, null)     # Target for the route, of the form integrations/IntegrationID, where IntegrationID is the identifier of an aws_apigatewayv2_integration resource.
  }))
  default     = {}
  description = "Configuration Block for routes"
}

variable "api_integration" {
  type = map(object({


    integration_type              = string                    # ntegration type of an integration. Valid values: AWS (supported only for WebSocket APIs), AWS_PROXY, HTTP (supported only for WebSocket APIs), HTTP_PROXY, MOCK (supported only for WebSocket APIs). For an HTTP API private integration, use HTTP_PROXY.
    connection_id                 = optional(string, null)    #  ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.
    connection_type               = optional(string, null)    # Type of the network connection to the integration endpoint. Valid values: INTERNET, VPC_LINK. Default is INTERNET
    content_handling_strategy     = optional(string, null)    # How to handle response payload content type conversions. Valid values: CONVERT_TO_BINARY, CONVERT_TO_TEXT. Supported only for WebSocket APIs.
    credentials_arn               = optional(string, null)    # Credentials required for the integration, if any
    description                   = optional(string, null)    # Description of the integration
    integration_method            = optional(string, null)    #  Integration's HTTP method. Must be specified if integration_type is not MOCK.
    integration_subtype           = optional(string, null)    # AWS service action to invoke. Supported only for HTTP APIs when integration_type is AWS_PROXY. See the AWS service integration reference documentation for supported values. Must be between 1 and 128 characters in length.
    integration_uri               = optional(string, null)    # URI of the Lambda function for a Lambda proxy integration, when integration_type is AWS_PROXY. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
    passthrough_behavior          = optional(string, null)    # Pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the request_templates attribute. Valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER. Default is WHEN_NO_MATCH. Supported only for WebSocket APIs.
    payload_format_version        = optional(string, null)    # The format of the payload sent to an integration. Valid values: 1.0, 2.0. Default is 1.0
    request_parameters            = optional(map(string), {}) # For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. For HTTP APIs with a specified integration_subtype, a key-value map specifying parameters that are passed to AWS_PROXY integrations. For HTTP APIs without a specified integration_subtype, a key-value map specifying how to transform HTTP requests before sending them to the backend. See the Amazon API Gateway Developer Guide for details
    request_templates             = optional(map(string), {}) # Map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.
    template_selection_expression = optional(string, null)    # The template selection expression for the integration.
    timeout_milliseconds          = optional(number, null)    # Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs. Terraform will only perform drift detection of its value when present in a configuration.

  }))
  default     = {}
  description = "Configuration Block for integration"
}


variable "api_authorizer" {
  type = map(object({
    authorizer_type                   = string                     # Authorizer type. Valid values: JWT, REQUEST. Specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.
    name                              = string                     # Name of the authorizer. Must be between 1 and 128 characters in length.
    authorizer_credentials_arn        = optional(string, null)     #Required credentials as an IAM role for API Gateway to invoke the authorizer. Supported only for REQUEST authorizers.
    authorizer_payload_format_version = optional(string, null)     # Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Valid values: 1.0, 2.0.
    authorizer_result_ttl_in_seconds  = optional(number, null)     #Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300. Supported only for HTTP API Lambda authorizers.
    authorizer_uri                    = optional(string, null)     #Authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource. Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    enable_simple_responses           = optional(bool, false)      # Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs.
    identity_sources                  = optional(list(string), []) # Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs.
  }))
  default     = {}
  description = "Configuration Block for authorizer"
}

variable "api_stage" {
  type = map(object({

    name                  = string                    # Name of the stage. Must be between 1 and 128 characters in length.
    auto_deploy           = optional(bool, false)     #  Whether updates to an API automatically trigger a new deployment. Defaults to false. Applicable for HTTP APIs.
    client_certificate_id = optional(string, null)    # Identifier of a client certificate for the stage. Use the aws_api_gateway_client_certificate resource to configure a client certificate. Supported only for WebSocket APIs.
    deployment_id         = optional(string, null)    #  Deployment identifier of the stage. Use the aws_apigatewayv2_deployment resource to configure a deployment.
    description           = optional(string, null)    # Description for the stage. Must be less than or equal to 1024 characters in length.
    stage_variables       = optional(map(string), {}) # Map that defines the stage variables for the stage
    tags                  = optional(map(string), {}) # Map of tags to assign to the stage. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.

  }))
  default     = {}
  description = "Configuration Block for stage"
}

variable "jwt_configuration" {
  type = list(object({
    audience = string # ARN of the CloudWatch Logs log group to receive access logs. Any trailing :* is trimmed from the ARN.
    issuer    = string # Single line format of the access logs of data. Refer to log settings for HTTP or Websocket.
  }))
  default     = null
  description = "Configuration Block for Jwt_configuration"
}

variable "request_parameter" {
  type = object({
    request_parameter_key = string # Request parameter key. This is a request data mapping parameter.
    required              = bool   #  Boolean whether or not the parameter is required
  })
  default     = null
  description = "Configuration Block for request parameter"
}


variable "response_parameters" {
  type = object({
    status_code = string      #  Boolean whether or not the parameter is required
    mappings    = map(string) #  Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter. See the Amazon API Gateway Developer Guide for details.
  })
  default     = null
  description = "Configuration Block for response"
}

variable "tls_config" {
  type = object({
    server_name_to_verify = optional(string, null)
  })
  default     = null
  description = "Configuration Block for tlsconfig"
}

variable "access_log_settings" {
  type = list(object({
    destination_arn = string # ARN of the CloudWatch Logs log group to receive access logs. Any trailing :* is trimmed from the ARN.
    format          = string # Single line format of the access logs of data. Refer to log settings for HTTP or Websocket.
  }))
  default     = null
  description = "Configuration Block for access logs"
}

variable "default_route_settings" {
  type = object({
    data_trace_enabled       = optional(bool, true)   # Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs. Defaults to false. Supported only for WebSocket APIs.
    detailed_metrics_enabled = optional(bool, true)   # Whether detailed metrics are enabled for the route. Defaults to false.
    logging_level            = optional(string, null) # Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs. Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs. Terraform will only perform drift detection of its value when present in a configuration.
    throttling_burst_limit   = optional(number, null) # Throttling burst limit for the route
    throttling_rate_limit    = optional(number, null) # Throttling rate limit for the route
  })
  default     = null
  description = "Configuration Block for default route logs"
}

variable "route_settings" {
  type = object({
    route_key                = string                 # Route key.
    data_trace_enabled       = optional(bool, true)   # Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs. Defaults to false. Supported only for WebSocket APIs.
    detailed_metrics_enabled = optional(bool, true)   # Whether detailed metrics are enabled for the route. Defaults to false.
    logging_level            = optional(string, null) # Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs. Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs. Terraform will only perform drift detection of its value when present in a configuration.
    throttling_burst_limit   = optional(number, null) # Throttling burst limit for the route
    throttling_rate_limit    = optional(number, null) # Throttling rate limit for the route
  })
  default     = null
  description = "Configuration Block for route logs"
}

variable "api_lambda_permissions" {
  type = map(object({
    statement_id  = optional(string, null)
    action        = string
    function_name = string
    principal     = string
  }))
  default     = null
  description = "Configuration Block for lambda permissions"
}


terraform.tfvars

aws_profile                  = "lalith"
aws_region                   = "us-west-1"
name                         = "API-Websocket"
protocol_type                = "WEBSOCKET"
api_key_selection_expression = "$request.header.x-api-key"
credentials_arn              = "arn:aws:iam::239312700453:role/p0httppermission"
description                  = "webocketapi"
disable_execute_api_endpoint = false
route_selection_expression   = "$request.body.action"
tags = {
  p_id     = "p03"
  prj-name = "AWS GDS CIL team"
  Owner    = "ravi.lalith.kalyan@gds.ey.com"
  name     = "P03_api_gateway_v2_api"
}
version1         = 2.0
fail_on_warnings = false

#-------------------------------------------routes
api_routes = {
  0 = {
    route_key          = "$connect"
    api_key_required   = false
    authorization_type = "NONE"
    operation_name     = "WEBSOCKET-ATHORIZER"
  }
  1 = {
    route_key          = "$disconnect"
    api_key_required   = false
    authorization_type = "NONE"
    operation_name     = "WEBSOCKET-ATHORIZER"

  }
  2 = {
    route_key          = "SendMessage"
    api_key_required   = false
    authorization_type = "NONE"
    operation_name     = "WEBSOCKET-ATHORIZER"
  }
}
#------------------------------------------------integration
api_integration = {
  0 = {
    integration_type          = "AWS_PROXY"
    connection_type           = "INTERNET"
    content_handling_strategy = "CONVERT_TO_TEXT"
    integration_method        = "POST"
    integration_uri           = "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:239312700453:function:Connect/invocations"
    passthrough_behavior      = "WHEN_NO_MATCH"
    payload_format_version    = "1.0"
    timeout_milliseconds      = "28000"
  }

  1 = {
    integration_type          = "AWS_PROXY"
    connection_type           = "INTERNET"
    content_handling_strategy = "CONVERT_TO_TEXT"
    integration_method        = "POST"
    integration_uri           = "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:239312700453:function:Disconnect/invocations"
    passthrough_behavior      = "WHEN_NO_MATCH"
    payload_format_version    = "1.0"
    timeout_milliseconds      = "28000"

  }
  2 = {
    integration_type          = "AWS_PROXY"
    connection_type           = "INTERNET"
    content_handling_strategy = "CONVERT_TO_TEXT"
    integration_method        = "POST"
    integration_uri           = "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:239312700453:function:SendMessage/invocations"
    passthrough_behavior      = "WHEN_NO_MATCH"
    payload_format_version    = "1.0"
    timeout_milliseconds      = "28000"

  }
}
#-----------------------------------------------stage
api_stage = {
  0 = {
    name        = "DEV"
    auto_deploy = true

    default_route_settings = {
      content = {
        data_trace_enabled       = true
        detailed_metrics_enabled = true
        logging_level            = "INFO"
        throttling_burst_limit   = 2002
        throttling_rate_limit    = 2002

      }
      access_log_settings = {
        content = {
          destination_arn = "arn:aws:logs:us-west-1:239312700453:log-group:hhtptesting:*"
          format          = "{\"requestId\":\"$context.requestId\"}"
        }
      }

  } }
}
#--------------------------------------------------

api_lambda_permissions = {
  0 = {
    statement_id  = "AllowAPIGatewayInvoke1"
    action        = "lambda:InvokeFunction"
    function_name = "Connect"
    principal     = "apigateway.amazonaws.com"

  }
  1 = {
    statement_id  = "AllowAPIGatewayInvoke2"
    action        = "lambda:InvokeFunction"
    function_name = "Disconnect"
    principal     = "apigateway.amazonaws.com"

  }
  2 = {
    statement_id  = "AllowAPIGatewayInvoke3"
    action        = "lambda:InvokeFunction"
    function_name = "SendMessage"
    principal     = "apigateway.amazonaws.com"

  }
}
